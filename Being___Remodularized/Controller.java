package testPackage;

import java.applet.Applet;
import java.awt.BorderLayout;
import java.awt.Frame;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import testPackage.*;

public class Controller extends Applet implements KeyListener {
	
	Thread animation;
	Model model = new Model();
	View view = new View();
	private Bird bird = Model.getBird();
	
	public void init() {
		setSize(900, 600);
		setFocusable(true);
		
		setLayout(new BorderLayout());
		this.add(BorderLayout.CENTER, view);
		
		Frame frame = (Frame) this.getParent().getParent();
		frame.setTitle("Factory Bird");	
		
		animation = new Thread(view);
		animation.start();
		
		// preparing parameters for view to display
		view.setDelay(17); // view.delay is always 17
		view.setModel(model);
		
		view.setController(this);
		
		
	}
	
	public void start() {
		view.setAlive(true);
		view.setRunning(true);
		
		Thread thread = new Thread();
		thread.start();
	}
	
	public void stop() {
		view.setRunning(false);
	}
	
	
	public void destroy() {
		view.setAlive(false);
	}
	
    // keyPressed checks to see if any of these are pressed and acts
    // accordingly
    public void keyPressed(KeyEvent e) {
        
        switch (e.getKeyCode()) {
                
                // Jump / Double Jump
            case KeyEvent.VK_W:
                bird.jump();
                System.out.println("Jumped");
                break;
                
                // Move Left
            case KeyEvent.VK_A:
                bird.moveLeft();
                System.out.println("Moving left");           		
	

                break;
                
            case KeyEvent.VK_S:
            	bird.diveBomb();
                break;
                
                // Move right
            case KeyEvent.VK_D:
            	bird.moveRight();
                System.out.println("Moving right");	
	
            	
                break;
                
                // Glide
            case KeyEvent.VK_K:
            	bird.glide();
            	System.out.println("Gliding");
                break;
                
        }
        
    }
    
    // keyReleased checks if a previously pressed key is released.
    // Usually used to stop movement (like moving left and right)
    public void keyReleased(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_W:
                break;
                
            case KeyEvent.VK_A:
            	if(bird.isMovingLeft()){
            		bird.stop();         		
            	}
                break;
                
            case KeyEvent.VK_S:
                break;
                
            case KeyEvent.VK_D:
            	if(bird.isMovingRight()){
            		bird.stop();         		
            	}
                break;
                
            case KeyEvent.VK_K:
                break;
                
        }
        
    }
    
    // Autogenerated - ignore (for now, at least)
    public void keyTyped(KeyEvent e) {
        // TODO Auto-generated method stub
    }
}